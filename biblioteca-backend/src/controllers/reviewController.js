const Libro = require('../models/Libro');
const Review = require('../models/Review');

exports.crearReview = async (req, res) => {
    try {
        const { bookId, rating, comment } = req.body;

        if (!req.user || !req.user._id) {
            return res.status(401).json({ msg: "Usuario no autenticado." });
        }

        console.log("üìå req.user en `crearReview`:", req.user); // ‚úÖ Depuraci√≥n


        const libro = await Libro.findById(bookId);
        if (!libro) return res.status(404).json({ msg: "Libro no encontrado." });

        console.log("üìå Usuario autenticado en `crearReview`:", req.user); // ‚úÖ Depuraci√≥n

        const nuevaReview = new Review({
            bookId,
            userId: req.user._id, // ‚úÖ Aseguramos que req.user._id existe
            rating,
            comment,
        });

        await nuevaReview.save();
        res.status(201).json(nuevaReview);

    } catch (error) {
        console.error("‚ùå Error al crear la rese√±a:", error);
        res.status(500).json({ msg: "Error al crear la rese√±a." });
    }
};

exports.obtenerReview = async (req, res) => {
    try {
        const { bookId } = req.params;

        // Buscar rese√±as por bookId
        const reviews = await Review.find({ bookId }).populate('userId', 'username');

        if (!reviews.length) {
            return res.status(404).json({ msg: "No hay rese√±as para este libro." });
        }

        res.json(reviews);

    } catch (error) {
        console.error("‚ùå Error al obtener las rese√±as:", error);
        res.status(500).json({ msg: "Error al obtener las rese√±as." });
    }
};

exports.actualizarReview = async (req, res) => {
    try {
        const { id } = req.params;
        const { rating, comment } = req.body;

        // Buscar rese√±a por `_id`
        const review = await Review.findById(id);
        if (!review) return res.status(404).json({ msg: "Rese√±a no encontrada." });

        // Verificar si el usuario es el propietario de la rese√±a
        if (review.userId.toString() !== req.user.id) {
            return res.status(403).json({ msg: "No tienes permiso para editar esta rese√±a." });
        }

        // Actualizar valores
        if (rating) review.rating = rating;
        if (comment) review.comment = comment;

        await review.save();
        res.status(200).json(review);

    } catch (error) {
        console.error("‚ùå Error al actualizar la rese√±a:", error);
        res.status(500).json({ msg: "Error al actualizar la rese√±a." });
    }
};

exports.eliminarReview = async (req, res) => {
    try {
        const { id } = req.params;

        // Buscar rese√±a por `_id`
        const review = await Review.findById(id);
        if (!review) return res.status(404).json({ msg: "Rese√±a no encontrada." });

        // Verificar si el usuario es el propietario
        if (review.userId.toString() !== req.user.id) {
            return res.status(403).json({ msg: "No tienes permiso para eliminar esta rese√±a." });
        }

        await review.deleteOne();
        res.status(200).json({ msg: "Rese√±a eliminada correctamente." });

    } catch (error) {
        console.error("‚ùå Error al eliminar la rese√±a:", error);
        res.status(500).json({ msg: "Error al eliminar la rese√±a." });
    }
};
